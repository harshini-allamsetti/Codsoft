#include <iostream>
#include <vector>

struct Task {
    std::string description;
    bool completed;
};

int main() {
    std::vector<Task> tasks;

    while (true) {
        std::cout << "To-Do List Manager" << std::endl;
        std::cout << "1. Add Task" << std::endl;
        std::cout << "2. View Tasks" << std::endl;
        std::cout << "3. Mark Task as Completed" << std::endl;
        std::cout << "4. Remove Task" << std::endl;
        std::cout << "5. Quit" << std::endl;
        std::cout << "Enter your choice: ";

        int choice;
        std::cin >> choice;

        if (choice == 1) {
            Task task;
            std::cout << "Enter task description: ";
            std::cin.ignore();
            std::getline(std::cin, task.description);
            task.completed = false;
            tasks.push_back(task);
            std::cout << "Task added: " << task.description << std::endl;
        } else if (choice == 2) {
            if (tasks.empty()) {
                std::cout << "No tasks in the to-do list." << std::endl;
            } else {
                std::cout << "To-Do List:" << std::endl;
                for (size_t i = 0; i < tasks.size(); ++i) {
                    std::cout << i + 1 << ". " << (tasks[i].completed ? "[X] " : "[ ] ") << tasks[i].description << std::endl;
                }
            }
        } else if (choice == 3) {
            int taskIndex;
            if (tasks.empty()) {
                std::cout << "No tasks to mark as completed." << std::endl;
            } else {
                std::cout << "Enter the index of the task to mark as completed: ";
                std::cin >> taskIndex;
                if (taskIndex > 0 && taskIndex <= tasks.size()) {
                    tasks[taskIndex - 1].completed = true;
                    std::cout << "Task marked as completed: " << tasks[taskIndex - 1].description << std::endl;
                } else {
                    std::cout << "Invalid task index. Please enter a valid index." << std::endl;
                }
            }
        } else if (choice == 4) {
            int taskIndex;
            if (tasks.empty()) {
                std::cout << "No tasks to remove." << std::endl;
            } else {
                std::cout << "Enter the index of the task to remove: ";
                std::cin >> taskIndex;
                if (taskIndex > 0 && taskIndex <= tasks.size()) {
                    std::cout << "Task removed: " << tasks[taskIndex - 1].description << std::endl;
                    tasks.erase(tasks.begin() + taskIndex - 1);
                } else {
                    std::cout << "Invalid task index. Please enter a valid index." << std::endl;
                }
            }
        } else if (choice == 5) {
            break;
        } else {
            std::cout << "Invalid choice. Please enter a valid option." << std::endl;
        }
    }

    return 0;
}
